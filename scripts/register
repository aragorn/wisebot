#!/usr/bin/perl -w
#$Id$ 

use lib "/home/softwise/wisebot/lib/perl";
use lib "./lib/perl";
use lib "../lib/perl";
use strict;
use SoftWise::SoftBot;
use Benchmark;

local $| = 1;
my $host = shift;
my $port = shift;
my $file = shift;
my $confirm = shift || 0;
my $stop = 0;
my $max_size = 10_000_000;

unless ($host and $port and $file) {
	print <<END;
Usage: $0 <host> <port> <file> [<confirm>]
    host  - hostname of search server
    port  - port number that softbot use
    file  - text data file or cdm data file to register
    confirm - set 1 if you want to confirm every document by key input
END
	exit;
}

$SIG{INT} = sub { $stop++; };

if (-d $file and -r "$file/cdm000000.db") {
    process_cdm_file($host, $port, $file, $confirm);
} else {
    process_data_file($host, $port, $file, $confirm);
}
exit;

sub process_cdm_file {
	my $host = shift;
	my $port = shift;
	my $file = shift;
	my $confirm = shift;

	my $total_count = 0;
	foreach my $num ( 0..99 ) {
		last if $stop;
		my $filename = sprintf("%s/cdm%06d.db", $file, $num);
		next unless -s $filename;

		print "processing $filename...\n";
		local *local_fh; my $fh = *local_fh; undef *local_fh;
		open($fh, $filename) or die "cannot open file: $!";

		my ($count, $size) = (0, 0);
		while( 1 ) {
			last if $stop;
			my ($dit, $body) = read_cdm($fh);
			last unless defined $dit;
			next unless $dit;

			print "." if (($count % 50) == 0);

			if ($confirm > 1 and $count < $confirm) {
				$count++;
				next;
			}

			register($dit, $body, $host, $port, $count);
			$count++;
			$size += length($body);
		}
		close($fh);
	
		my $file_size = -s $filename;	
		print "\nregistered $count docs/$size bytes.\n";
		printf("file size[%d] - registered bytes[%d] = %d\n",
			$file_size, $size, $file_size - $size);
		$total_count += $count;
	}
	print "totally $total_count docs are registered.\n";
}

sub read_cdm {
	my $fh = shift;
	my ($oid, $rid, $dit, $body) = ("", "", "", "<Document>\n");

	while (<$fh>) {
		return ("", "") if $stop;
		$oid = $_ if m|<OID>|;
		$rid = $_ if m|<RID>|;
		$body = "" if m|^<Document>|;
		s|</Document><Document>|</Document>|;
		$body .= $_;
#print "[$_]\n";
		goto register_cdm if m|</Document>|;
	}

	return (undef,undef);

    register_cdm:
	return ("", "") unless $oid;

	foreach ($oid, $rid) {
		chomp;
		s|<[RO]ID>(.*)</[RO]ID>|$1|;
		s|<!\[CDATA\[(.*)\]\]>|$1|;
	}

	$dit = sprintf("PT=CDM^OID=%s^RID=%s^", $oid, $rid);
#	print "oid[$oid]  rid[$rid]\n";
#	print "body = [$body]\n\n\n";
#	select(undef,undef,undef,0.5);

	return ($dit, $body);
}

sub process_data_file {
	my $host = shift;
	my $port = shift;
	my $file = shift;
	my $confirm = shift;

	open(FILE, $file) or die "cannot open file: $!";

	my $state = 0;
	my ($dit, $body, $count) = ("", "", 0);
	while (<FILE>) {
		last if $stop;

		if ($state == 0) {
			/TextForTest/ and do {
				print "Regular Data File\n";
				next;
			};
			/^-{78,82}$/ and do {
				$state = 1;
				next;
			};
			/OID=/ and do {
				$dit = $_;
				chomp $dit;
				$body = "";
				$state = 2;
				print "Irregular Data File! Anyway I will handle this.\n";
				next;
			};
		}
		if ($state == 1) {
			# 구분선이 연속으로 오는 경우도 그냥 처리
			/^-{78,82}$/ and do {
				$state = 1;
				next;
			};

			$dit = $_;
			chomp $dit;
			$body = "";
			$state = 2;
		}

		if ($state == 2) {
			$state = 3; # empty line
			next;
		}

		if ($state == 3) {
			/^-{78,82}$/ or $body =~ /<\/Document>/ and do {
				$state = 1;
				print "." if (($count % 50) == 0);
				if ($confirm > 1 and $count < $confirm) {
					$count++;
					next;
				}
				register($dit, $body, $host, $port, $count);
				$count++;
				next;
			};
			$body .= $_;
		}
	}
	close(FILE);
	print "\nregistered $count docs.\n";
}

sub register {
	my $dit = shift;
	my $body = shift;
	my $host = shift;
	my $port = shift;
	my $count = shift;

	my %dit;
	foreach my $pair ( split(/\^/, $dit) ) {
		my ($key, $data) = split(/=/, $pair);
		next unless defined $key and $key;
		$key = uc($key);

		$data =~ s/^\s+|\s+$//g;
		$dit{$key} = $data;
	}
	# XXX why does it substr? --aragorn
	#$dit{OID} = substr($dit{OID}, -30) if length($dit{OID}) > 30;

	my $dit2 = sprintf("PT=%s^OID=%s^RID=%s^", $dit{PT}, $dit{OID}, $dit{RID} || "");

	printf ("![%dth,size%d]", $count, length($body)) if (length($body) > $max_size);

	my $body_start = substr($body, 0, 60);
	my $body_end = substr($body, -100, 100);
	$body_end =~ s/.*(\]\]><\/B_body>)/$1/;

	if ( $confirm eq 1) {
		print <<END;
--------------------------------------------------------------------------------
host, port = $host, $port
dit  = [$dit2]
body = [$body_start]
       ~
       [$body_end]
Press Enter To Register This Document.
END
		my $tmp = <STDIN>;
	}

	foreach my $try (1..5) {
		last if $stop;
		my $sb = new SoftWise::SoftBot($host, $port);
		if (not defined $sb or not $sb) {
			warn "cannot connect to softbot: $!" if $try > 3;
			select(undef,undef,undef,0.1);
			next;
		}
		my $r;
		$r = $sb->regist_doc($dit2, $body) if $dit{PT} eq "CDM";
		$r = $sb->delete_oid($dit{OID}, $body) if $dit{PT} eq "DELETE";
		last if $stop;

		if ( defined $r and $r > 0 ) {
			return 1;
		} else {
			$r = "undef" unless defined $r;
			printf "regist_doc error of $try-th try! [%s]\n", $r;
			print <<END;
--------------------------------------------------------------------------------
host, port = $host, $port
dit  = [$dit2]
body = [$body_start]
       ~
       [$body_end]
END
			sleep 1;
		}
	}
	printf "register_doc failed!\n";
	return 0;

}

