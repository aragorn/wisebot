#!/usr/bin/perl
# dump 파일 변환 프로그램 - $Id$
#
# 수정이력
# 2006/05/27 - 1만건씩 파일을 분리하는 BLOG2 mode 추가
# 2006/05/24 - SKT BMT를 위해 처음 작성

use strict;

my $mode = shift;
my $input = shift;
my $output = shift;
unless ($mode and $input and $output)
{
  print <<END;
Usage: $0 <mode> <input> <output>
  mode      : IMS    - IMS dump to IMS BMT data (SKT BMT)
              BLOG   - BLOG dump to BLOG BMT data, splitted by 100k (SKT BMT)
              BLOG2  - BLOG dump to BLOG BMT data, splitted by 10k  (SKT BMT)
              IMS_CDM   - IMS BMT data to CDM (SKT BMT)
              BLOG_CDM  - BLOG BMT data to CDM (SKT BMT)
  input     : input file name
  output    : output file name (or file name prefix)
END
  exit;
}


if ( $mode eq "IMS" or $mode eq "BLOG" or $mode eq "BLOG2" )
{
  my $IN = input_handler($input);

  my @docs_to_delete;
  my @docs_to_update;
  OUTER_LOOP: foreach my $out_cnt ( 1..1000 ) {
    print "$out_cnt", "'th loop.\n";

    my $OUT = output_handler($output, $out_cnt);

    my @docs_to_delete_next_time;
    my @docs_to_update_next_time;
    my $max_num = 100_000;
    $max_num = 10_000 if $mode eq "BLOG2";
    foreach my $cnt ( 1..$max_num ) {
      my $doc = get_document($mode, $IN) or last OUTER_LOOP;
      push @docs_to_delete_next_time, $doc if $cnt % 20 == 13;
      push @docs_to_update_next_time, $doc if $cnt % 20 == 17;
      put_document($mode, $OUT, "INSERT", $doc, $out_cnt);
      put_document($mode, $OUT, "DELETE", shift @docs_to_delete, $out_cnt) if $cnt % 20 == 13;
      put_document($mode, $OUT, "UPDATE", shift @docs_to_update, $out_cnt) if $cnt % 20 == 17;
    }

    @docs_to_delete = @docs_to_delete_next_time;
    @docs_to_update = @docs_to_update_next_time;
    close($OUT);
  }

  close($IN);

} elsif ( $mode eq "IMS_CDM" or $mode eq "BLOG_CDM" ) {

  my $IN = input_handler($input);
  my $OUT = output_handler($output);

  foreach my $cnt ( 1..100_0000 ) {
      my $doc = get_document($mode, $IN) or last;
      put_document($mode, $OUT, $doc);
  }
  print OUT "-" x 80, "\n";

  close($OUT);
  close($IN);
}

exit;

###############################################################################

sub get_document
{
  my $mode = shift;
  if ($mode eq "IMS" or $mode eq "IMS_CDM")
  { return get_ims_document(@_); }
  elsif ($mode eq "BLOG" or $mode eq "BLOG2")
  { return get_blog_document(@_); }
  elsif ($mode eq "BLOG_CDM")
  { return get_blog_cdm_document(@_); }
  else
  { die "unknown document type: $mode"; }
}

sub put_document
{
  my $mode = shift;
  if ($mode eq "BLOG_CDM")
  { return put_blog_cdm_document(@_); }
  elsif ($mode eq "BLOG")
  { return put_blog_document(@_); }
  elsif ($mode eq "IMS_CDM")
  { return put_ims_cdm_document(@_); }
  elsif ($mode eq "IMS")
  { return put_ims_document(@_); }
  else
  { die "unknown document type: $mode"; }
}

###############################################################################
# BLOG


sub put_blog_document
{
  my $fh = shift;
  my $state = shift;
  my $doc = shift or return;
  my $cnt = shift;

#print "$state fh=$fh cnt=$cnt\n";

  my @fields = split(/\n/, $doc);
  my %field;
  foreach ( @fields ) {
    my ($key, $value) = split(/>/, $_, 2);
    $key .= ">";
    $field{$key} = $value;
  }

  if ($state eq "INSERT")
  {
    # do nothing
  } elsif ($state eq "UPDATE") {
    $field{"<P_TITLE>"} = "변경" . $cnt . " " . $field{"<P_TITLE>"};
  } else {
    foreach my $k ( qw( <MESSAGEID> <B_TITLE> <B_LINK> <B_SOURCE>
                      <B_USERID> <B_AUTHOR> <P_TITLE> <P_CATE> <P_REGDATE>
                      <P_REGTIME> <P_XML_CRAWLDATE> <P_XML_CRAWLTIME> <P_CONTENT_CRAWLDATE>
                      <P_CONTENT_CRAWLTIME> <P_CONTENT> <TRANSDATE> ) )
    {
      $field{$k} = "";
    }
  }

  foreach my $k ( qw( <MESSAGEID> <B_DOCID> <P_DOCID> <B_TITLE> <B_LINK> <B_SOURCE>
                      <B_USERID> <B_AUTHOR> <P_TITLE> <P_LINK> <P_CATE> <P_REGDATE>
                      <P_REGTIME> <P_XML_CRAWLDATE> <P_XML_CRAWLTIME> <P_CONTENT_CRAWLDATE>
                      <P_CONTENT_CRAWLTIME> <P_CONTENT> <TRANSDATE> ) )
  {
    print { $fh } $k, $field{$k}, "\n";
#print $k, $field{$k}, "\n"; select(undef,undef,undef,0.1);
  }
  print { $fh } "<BMT_STATE>", $state, "\n";
#print "<BMT_STATE>", $state, "\n";

  return;
=rem
0 <MESSAGEID>
1 <B_DOCID>
2 <P_DOCID> 
3 <B_TITLE> 
4 <B_LINK>
5 <B_SOURCE>
6 <B_USERID>
7 <B_AUTHOR>
8 <P_TITLE>
9 <P_LINK>
10 <P_CATE>
11 <P_REGDATE>
12 <P_REGTIME>
13 <P_XML_CRAWLDATE>
14 <P_XML_CRAWLTIME>
15 <P_CONTENT_CRAWLDATE>
16 <P_CONTENT_CRAWLTIME>
17 <P_CONTENT>
18 <TRANSDATE>
19 <BMT_STATE>
=cut
}

sub put_blog_cdm_document
{
  my $fh = shift;
  my $doc = shift or return;

  my @fields = split(/\n/, $doc);
  my %field;
  foreach ( @fields ) {
    my ($key, $value) = split(/>/, $_, 2);
    $key .= ">";
	$value =~ s/|\^|;/ /g;
	$value =~ s/\<\!\[CDATA\[/(CDATA/g;
	$value =~ s/\]\]>/)>/g;
    $field{$key} = $value;
  }

  if ($field{"<BMT_STATE>"} eq "DELETE")
  {
    print { $fh } "-" x 80, "\n";
    print { $fh } "PT=DELETE^OID=", $field{"<P_LINK>"}, "^\n\n";
    print { $fh } <<END;
<Document>
</Document>
END
    return;
  } else {
    my $source = $field{"<B_SOURCE>"};
    if ( $source =~ m/daum.net/ )        { $source = "daum"; }
    elsif ( $source =~ m/naver.com/ )    { $source = "naver"; }
    elsif ( $source =~ m/dreamwiz.com/ ) { $source = "dreamwiz"; }
    elsif ( $source =~ m/empas.com/ )    { $source = "empas"; }
    else  { $source = "etc"; }

    print { $fh } "-" x 80, "\n";
    print { $fh } "PT=CDM^OID=", $field{"<P_LINK>"}, "^\n\n";
    print { $fh } <<END;
<Document>
<title><![CDATA[$field{"<P_TITLE>"}]]></title>
<body><![CDATA[$field{"<P_CONTENT>"} ]]></body>
<pattern>softwisezzz</pattern>
<author><![CDATA[$field{"<P_AUTHOR>"}]]></author>
<oid><![CDATA[$field{"<P_LINK>"}]]></oid>
<b_id><![CDATA[$field{"<B_DOCID>"}]]></b_id>
<b_title><![CDATA[$field{"<B_TITLE>"}]]></b_title>
<b_link><![CDATA[$field{"<B_LINK>"}]]></b_link>
<p_id><![CDATA[$field{"<P_DOCID>"}]]></p_id>
<date>$field{"<P_REGDATE>"}</date>
<p_link><![CDATA[$field{"<P_LINK>"}]]></p_link>
<source><![CDATA[$source]]></source>
</Document>
END
  }

  return;
=rem
0 <MESSAGEID>
1 <B_DOCID>
2 <P_DOCID> 
3 <B_TITLE> 
4 <B_LINK>
5 <B_SOURCE>
6 <B_USERID>
7 <B_AUTHOR>
8 <P_TITLE>
9 <P_LINK>
10 <P_CATE>
11 <P_REGDATE>
12 <P_REGTIME>
13 <P_XML_CRAWLDATE>
14 <P_XML_CRAWLTIME>
15 <P_CONTENT_CRAWLDATE>
16 <P_CONTENT_CRAWLTIME>
17 <P_CONTENT>
18 <TRANSDATE>
19 <BMT_STATE>
=cut
}

sub get_blog_document
{
  my $fh = shift;

#print "get_blog_document\n";
  my $doc = "";
  while ( <$fh> )
  {
    $doc .= $_;
#print "DEBUG $_"; select(undef,undef,undef,0.1);

    /^\<TRANSDATE\>/ and return $doc;
  }
}

sub get_blog_cdm_document
{
  my $fh = shift;

#print "get_blog_document\n";
  my $doc = "";
  while ( <$fh> )
  {
    $doc .= $_;
#print "DEBUG $_"; select(undef,undef,undef,0.1);

    /^\<BMT_STATE\>/ and return $doc;
  }
}

###############################################################################
# IMS

sub put_ims_document
{
  my $fh = shift;
  my $state = shift;
  my $doc = shift or return;
  my $cnt = shift;

#  print "$state fh=$fh cnt=$cnt\n";
#  print { $fh } "$state fh=$fh cnt=$cnt\n";
  if ($state eq "INSERT")
  {
    print { $fh } $state, "\t", $doc;
    return;
  }

  my @fields = split(/\t/, $doc);
  if ($state eq "UPDATE")
  {
    $fields[5] = "변경" . $cnt . " " . $fields[5];
  } else {
    foreach my $i ( 1..16 ) {  $fields[$i] = ""; }
    $fields[17] = "D\n";
  }
  print { $fh } join("\t", $state, @fields);
  return;
=rem
0 oid
1 menu_id
2 tree_id
3 system_id
4 category_id
5 menu_name
6 author
7 body
8 menu_url
9 menu_type
10 rgst_date
11 age_yn
12 device_attr_mode
13 device_group_list
14 menu_path
15 depth
16 ord
17 useyn
=cut
}

sub put_ims_cdm_document
{
  my $fh = shift;
  my $doc = shift or return;

  my ($state, $oid, $menu_id, $tree_id, $system_id, $category_id, $menu_name,
      $author, $body, $menu_url, $menu_type, $rgst_date, $age_yn, $device_attr_mode,
      $device_group_list, $menu_path, $depth, $ord, $useyn) = split(/\t/, $doc);

  if ($state eq "DELETE")
  {
    print { $fh } "-" x 80, "\n";
    print { $fh } "PT=DELETE^OID=", $oid, "^\n\n";
    print { $fh } <<END;
<Document>
</Document>
END
  } else {
    $rgst_date = substr($rgst_date, 0, 8);
    my $dgcop;
    if ($device_attr_mode eq "Y") { $dgcop = 1; }
    else                          { $dgcop = 0; }
    my @dgc = split(/;/, $device_group_list);

    foreach my $cnt ( 1..10 ) {
      if($dgc[$cnt] eq "") {
      } else {
        $dgc[$cnt] = "A" . $dgc[$cnt];
      }
    }

    my $dgccnt = @dgc; $dgccnt -= 1; 
        $dgccnt = 0 if $dgccnt < 0;
        $dgccnt = 1 if $dgccnt > 0;

    print { $fh } "-" x 80, "\n";
    print { $fh } "PT=CDM^OID=", $oid, "^\n\n";
    print { $fh } <<END;
<Document>
<oid><![CDATA[$oid]]></oid>
<menu_id><![CDATA[$menu_id]]></menu_id>
<tree_id><![CDATA[$tree_id]]></tree_id>
<system_id><![CDATA[$system_id]]></system_id>
<cate><![CDATA[A$category_id]]></cate>
<menu_name><![CDATA[$menu_name]]></menu_name>
<author><![CDATA[$author]]></author>
<body><![CDATA[$body]]></body>
<menu_url><![CDATA[$menu_url]]></menu_url>
<menu_type><![CDATA[$menu_type]]></menu_type>
<date><![CDATA[$rgst_date]]></date>
<age_yn><![CDATA[$age_yn]]></age_yn>
<dgcop><![CDATA[$dgcop]]></dgcop>
<dgc1><![CDATA[$dgc[1]]]></dgc1>
<dgc2><![CDATA[$dgc[2]]]></dgc2>
<dgc3><![CDATA[$dgc[3]]]></dgc3>
<dgc4><![CDATA[$dgc[4]]]></dgc4>
<dgc5><![CDATA[$dgc[5]]]></dgc5>
<dgc6><![CDATA[$dgc[6]]]></dgc6>
<dgc7><![CDATA[$dgc[7]]]></dgc7>
<dgc8><![CDATA[$dgc[8]]]></dgc8>
<dgc9><![CDATA[$dgc[9]]]></dgc9>
<dgc10><![CDATA[$dgc[10]]]></dgc10>
<dgccnt><![CDATA[$dgccnt]]></dgccnt>
<menu_path><![CDATA[$menu_path]]></menu_path>
<pattern>softwisezzz</pattern>
<depth><![CDATA[$menu_path]]></depth>
<ord><![CDATA[$ord]]></ord>
<useyn><![CDATA[$useyn]]></useyn>
</Document>
END
  }

  return;
=rem
0 oid
1 menu_id
2 tree_id
3 system_id
4 category_id
5 menu_name
6 author
7 body
8 menu_url
9 menu_type
10 rgst_date
11 age_yn
12 device_attr_mode
13 device_group_list
14 menu_path
15 depth
16 ord
17 useyn
=cut
}

sub get_ims_document
{
  my $fh = shift;

  my $l = <$fh> or return undef;
#print "test = $l";

  return $l;
}

###############################################################################
# common
#
sub input_handler
{
  my $input = shift;

  local *local_fh; my $fh = *local_fh; undef *local_fh;
  open($fh, $input) or die "cannot open ims input file[$input]: $!";

  return $fh;
}

sub output_handler
{
  my $output = shift;
  my $out_cnt = shift;
  my $name;

  $name = sprintf("%s.%02d", $output, $out_cnt) if defined $out_cnt;
  $name = $output if not defined $out_cnt;

  local *local_fh; my $fh = *local_fh; undef *local_fh;
  open($fh, ">$name") or die "cannot open ims output file[$name]: $!";

  return $fh;
}
