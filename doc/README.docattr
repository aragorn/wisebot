# $Id$ 

Document Attribute

DocAttri? What's This?
----------------------

기존의 Canned Document Manager 기반의 DBMS 디자인을 바꾸는 첫번째 작업이다.
검색엔진은 단어검색을 주목적으로 하는 DBMS이나 단어검색 기능만 갖추어서는
안 된다.

일반적인 문서는 2가지 유형의 데이터타입을 포함하게 된다.
 1) 정수형 데이터
 2) 문자열 데이터
문자열 데이터는 색인어를 추출하여 단어중심의 문서집합연산을 통해 검색하게
되나, 정수형 데이터는 주로 1) 범위연산, 2) Bit Mask연산을 통해 검색하게 
된다. 또한 문자열 데이터는 수정이 잦지 않으나, 정수형 데이터는 한번 등록된
값이 계속 변화하는 경향성이 있다.

이러한 문서의 특성을 반영하여 SoftBotNext는 문서의 데이터를 다음과 같은 구조로
다루도록 한다.
 1) 문서 : 일반적인 문서는 XML로 표현된다. 문서는 크게 정수형 데이터와 문자열
           데이터를 포함하게 된다.
 2) 정수형 데이터 : 잦은 수정, 범위 연산자 지원
 3) 문자열 데이터 : 수정시  문서 전체 삭제 및 재등록, 단어중심 검색연산
 4) 문서저장단계
   - 문서 DB Scheme 초기화 : 문서를 등록하기 전 문서구조의 Scheme을 초기화하고
           디스크에 저장. 문서 DB Scheme에 따라 DocAttri의 구조체 선언.
   - 외부문서 등록 : 앞 Scheme에 따라 XML형태로 문서 등록, 아직 저장하지 않음
   - 정수형 데이터와 문자열 데이터 분리
   - 문자열 데이터는 XML형태로 Canned Document Manager에 저장
   - 정수형 데이터는 DocAttri를 통해 그 값 그대로 저장
 5) 문서접근단계
   - 문서의 정수형 데이터 접근시 DocAttri를 통해 접근 : 빠른 접근 속도 보장
   - 문자열 데이터 접근시 CDM을 통해 접근
   - 문서 전체 정보를 출력하는 경우, DocAttri와 CDM의 값을 조합하여 XML로 변환


=====================
REQUIREMENT OF DESIGN
=====================
1) 개발자 혹은 관리자가 런타임(서버시작시)에 data structure를 변경할수 있다.
2) data structure의 member variable을 런타임에 변경할 수 있다.
3) 빠르게 조건 연산이 이루어져야 한다.

ps.
dfil은 다른 데이터구조와는 달리, ranking에 따라 document set을 sorting할 때 
집중적으로 많이 쓰이게 된다. 이때 숫자연산을 위해 function call이 이루어지는
것과 memory를 직접 access하는 것은 차이가 많다.

     function call을 하여 if연산을 한번하는 작업을 100000000번, 그리고 function call
	 을 하지 않고 같은 작업을 같은 횟수 반복하면 15%의 속도 차이가 납니다.
	 if연산을 두번하면 그 차이는 더욱 줄어들고요.. 만약 비트연산이라든가 몇가지 작업을
	 더하면 그 차이가 거의 없을것 같습니다.
	 그리고 function call대신 macro를 사용하는 방법은 static변수를 못사용하는 단점이
	 있습니다. --nominam

dfil을 array처럼 다룰 수 있는 방법은? --05/08 aragorn


I think...
	condition computing function이 외부에서 주어지도록 design한다면
	document attribute manager는 datastructure를 몰라도 될것 같다.. 
	docattr manager는 그 element의 크기만 알고 있고 몇번째의 data를
	요구하면 건내주기만 하며 그것을 해석하여 조건 연산을 하는 것은
	모두 외부에서 주어지는 함수가 실행하면 되기 때문이다..

I think...
	연산순위에 대한 고찰이다.
	docattr의 연산은 unary operator이며 연산순위가 가장 높아진다고 생각된다.
	예를 들어...
	(노무현 AND categori:정치분야) AND 민주당
	란 query가 들어오면 categori 연산자가 가장 연산순위가 높게...


-- 방법1) datastructure와 조건연산함수를 shared object로 만들어 
          dynamic loading할 수 있도록 한다.
-- 방법2) data structure들의 경우를 미리 고려하여 여러가지 선택 가능한 
          datastructure를 만들어두고 config등의 방법으로 runtime에 변경이 
		  가능하도록 한다.
-- 방법3) 위 두가지 방법을 모두.. option으로 주어진 몇가지 데이타구조를
		  사용할 수도 있고 여의치 않다 싶으면 so로 import할 수도 있고..

-------------------------------------------------------------------------------


=============================
     IMPLEMENTATION
=============================

10M docs * 40byte/doc = 400MB

struct doc_attri_t {
	int8_t delete : 1;
	int8_t reserved1 : 7;
	int32_t time : 24;
	int32_t attri1;
	int32_t attri2;
	int32_t attri3;
	int32_t attri4;
};


// input data type과 output data type은 같아야 한다.
// query processor에서 docattr의 조건연산 외의 다른 연산을 연동할 수 있도록
// 데이타구조를 공유해야 한다.
// 예) (단어조건A & Docattr조건B) | 단어조건C



// element type of input array
typedef request_t input_t;

// element type of output array
typedef request_t output_t;


#attri1:1234 #attri2:1-10 #attri3:1,2,3,4

1) field type
 - int  : n-bits
 - bit  : n-bits
 - char : n-bytes

2) field name





-------------------------------
  * METHOD *
-------------------------------

DFIL_open
Load dfil data from file to memory

DFIL_close

DFIL_syncronize
Save dfile data from memory to file

DFIL_get
Get one document attribute object

	INPUT: point of input_t;
	OUTPUT: point of output_t;

DFIL_getArray
Get document attribute objects array,
if masking opperation result is not zero

	INPUT: array of point of input_t;
	       filtering condition (function pointer? or any mehtod...)
	OUTPUT: array of point of output_t;

DFIL_set
Set one document attribute object

DFIL_setArray
Set document attribute objects array

DFIL_sortBy
Sort array of attribute objects by particular member data

-------------------
