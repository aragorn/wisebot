# $Id$ 

{ 데이타 구조 }

{ 함수들... }

{
 configure manager를 초기화한다. 
	1. config table작성
	2. module table작성
	3. registry table작성
}

procedure conf_manager_starter (path:string) 
begin
	{ configuration파일에서 내용을 읽어들인다. -> 메모리에 로드.. }
	getConfiguration (path)

	{ add_module을 할 module리스트 작성 }
	makeModuleList (path)

	{ module의 개인적인 설정변수들을 불러들인다. }
	readModuleConfig ()

	{ module의 config table을 준비한다. }
	makeConfigTable ()

	{ module의 config table에 callback함수의 argument로 들어갈 data를 채워넣는다. }
	handleConfiguration ()

	{ module의 config table에 등록되어 있는 callback함수들을 차례차례부르며 config값을 
	할당, 확정 }
	runConfigFunction (number of module config)

	{ load_static_modules }
	load_modules ()
end

procedure conf_manager_destroyer ()
begin
	{ 마감 }
	endConfigManager ()
end



modules_array
------------------------------------------
core_module

------------------------------------------
#ifdef _LINUX_
include "server_linux.conf"
#elsif _SOLARIS_
include "server_solaris.conf"
#endif



<softbot_core.c>
AddModule search1_module mod_search1.so
# modules_array에 search_module을 추가한다. 이때 search_module에 사용하는
# config directive 목록도 읽어들여진다. 따라서 이 순간 이후부터 search_module의
# config directive의 설정값을 읽어들일 수 있다.
AddModule search_module mod_search.so
# modules_array에 search_module을 추가한다. 이때 search_module에 사용하는
# config directive 목록도 읽어들여진다. 따라서 이 순간 이후부터 search_module의
# config directive의 설정값을 읽어들일 수 있다.

ProcessTitle softbot
DeaultPort 8604 
LogLevel 10
ErrorLog /var/log/softbot/error_log
</softbot_core.c>

<mod_search1.c>
#Port 1234
SearchArraySize 1000
</mod_search1.c>

<softbot_core.c>
AddModule search_module mod_search.so
# modules_array에 search_module을 추가한다. 이때 search_module에 사용하는
# config directive 목록도 읽어들여진다. 따라서 이 순간 이후부터 search_module의
# config directive의 설정값을 읽어들일 수 있다.
</softbot_core.c>

<mod_seach2.c>
SearchArraySize 2000
</mod_search2.c>
------------------------------------------
